npm install @reduxjs/toolkit // install redux toolkit
------------------------------
npm init -----package.json
npm install redux ----node_modules folder and package-lock.json
// import redux
const redux = require('redux');
---------------------------------------------------------------------------------------
if imported files
-npm install
-npm run start

if new project
-cd my_project
-npx create-react-app my-app
     -npm start

-npm run build
-npm test
-npm run eject

// styled components installation
npm install styled-components

------------------------------

-----------------custom wrappers return props.children
<></>
<React.Fragment></React.Fragment>

or import { Fragment } from 'react';

<Fragment></Fragment>

----------------//react portal

import ReactDOM from 'react-dom';

<>
   { ReactDom.createPortal(<JSX />, document.getElementByID('id-name') ) }
</>

----------// useState

const [varName, funcName] = useState('');

const stateHandler = (event) => {
    funcName(event.target.value);
};

console.log(varName);

<Example exFunct={stateHandler}>

-----------// useRef

const exampleRef = useRef();
const finalValue = exampleRef.current.value;

---------// local storage

localeStorage.setItem();
localeStorage.getItem();
localeStorage.removeItem();

---------// useEffect (email and password are useState)

useEffect(() => {
    const identifier = setTimeout(() => {
      console.log('Nag stop na so check na!');
      setFormIsValid(
        enteredEmail.includes('@') && enteredPassword.trim().length > 6
      );
    }, 500);

    return () => {
      console.log('Cleaning');
      clearTimeout(identifier);
    };
   
  }, [enteredEmail, enteredPassword] );

---------// useReducer

 const emailChangeHandler = (event) => {
    dispatchEmail({ type: "USER_INPUT", val: event.target.value });

  };

const emailReducer = (state, action) => {
  if (action.type === "USER_INPUT") {
    return { value: action.val, isValid: action.val.includes("@") };
  }
  if (action.type === "INPUT_BLUR") {
    return { value: state.value, isValid: state.value.includes("@") };
  }
  return { value: "", isValid: false };
};

const [emailState, dispatchEmail] = useReducer(emailReducer, {value: "",isValid: null,});

-------object destructuring

const { isValid: passwordIsValid } = passwordState;

---------auth context

import React from 'react';

const AuthContext = React.createContext({
    isLoggedIn: false
});

export default AuthContext;

#########

import AuthContext from "../../store/auth-context";
const ctx = useContext(AuthContext);


---------------------------------------------------------------------------------------------------
import React, { useState, useEffect, useCallback } from "react";

import MoviesList from "./components/MoviesList";
import "./App.css";

function App() {
  const [movies, setMovies] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchMovieHandler = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try{
      const response = await fetch("https://swapi.dev/api/films/");
      if(!response.ok){
        throw new Error('Something went wrong!');
      }
      const data = await response.json();
      const transformMovies = data.results.map((movieData) => {
        return {
          id: movieData.episode_id,
          title: movieData.title,
          openingText: movieData.opening_crawl,
          releaseDate: movieData.release_date
        };
      });
      setMovies(transformMovies);
    } catch (error) {
      setError(error.message);
    }
    setIsLoading(false);
    
  }, []);

  useEffect(() => {
    fetchMovieHandler();
  },[fetchMovieHandler]);

  return (
    <React.Fragment>
      <section>
        <button onClick={fetchMovieHandler}>Fetch Movies</button>
      </section>
      <section>
        {!isLoading && movies.length>0 && <MoviesList movies={movies} />}
        {!isLoading && movies.length === 0 && !error && <MoviesList movies={movies} />}
        {!isLoading && error &&<p>{error}</p>}
        {isLoading && <p>Loading...</p>}
      </section>
    </React.Fragment>
  );
}

export default App;
